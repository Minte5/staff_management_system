{"ast":null,"code":"var _jsxFileName = \"/home/mints/Downloads/staff_management_system/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Navbar from './components/Navbar';\nimport AdminPage from './pages/AdminPage';\nimport UserPage1 from './pages/UserPage1';\nimport UserPage2 from './pages/UserPage2';\nimport ForgotPassword from './pages/ForgotPassword';\nimport ForgotPasswordConfirm from './pages/ForgotPasswordConfirm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nconst AppContent = () => {\n  _s();\n  // Get the current location using useLocation hook\n  const location = useLocation();\n\n  // Determine whether to render the Navbar based on the current route\n  const shouldRenderNavbar = location.pathname !== '/' && location.pathname !== '/forgot-password' && location.pathname !== '/forgot-password-confirm';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [shouldRenderNavbar && /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/forgot-password\",\n        element: /*#__PURE__*/_jsxDEV(ForgotPassword, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/forgot-password-confirm\",\n        element: /*#__PURE__*/_jsxDEV(ForgotPasswordConfirm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 57\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/admin\",\n        element: /*#__PURE__*/_jsxDEV(AdminPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/user1\",\n        element: /*#__PURE__*/_jsxDEV(UserPage1, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/user2\",\n        element: /*#__PURE__*/_jsxDEV(UserPage2, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n/*function App() {\n\n  const location = useLocation();\n\n  // Determine whether to render the Navbar based on the current route\n  const shouldRenderNavbar = location.pathname !== '/Login' && location.pathname !== '/forgot-password';\n\n  \n  return (\n    <div className='App'>\n      <Router>\n        \n        {shouldRenderNavbar && <Navbar />}\n        <Routes>\n          \n          <Route path=\"/\" element={<Login />} />\n          <Route path=\"/forgot-password\" element={<ForgotPassword />} />\n          <Route path=\"/forgot-password-confirm\" element={<ForgotPasswordConfirm />} />\n          <Route path=\"/admin\" element={<AdminPage />} />\n          <Route path=\"/user1\" element={<UserPage1 />} />\n          <Route path=\"/user2\" element={<UserPage2 />} />\n        </Routes>\n        \n        \n      </Router>\n    </div>\n    \n  );\n};*/\n_s(AppContent, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c2 = AppContent;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppContent\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Route","Routes","useLocation","Login","Navbar","AdminPage","UserPage1","UserPage2","ForgotPassword","ForgotPasswordConfirm","jsxDEV","_jsxDEV","App","children","AppContent","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s","location","shouldRenderNavbar","pathname","className","path","element","_c2","$RefreshReg$"],"sources":["/home/mints/Downloads/staff_management_system/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes , useLocation} from 'react-router-dom';\nimport Login from './pages/Login';\nimport Navbar from './components/Navbar';\nimport AdminPage from './pages/AdminPage';\nimport UserPage1 from './pages/UserPage1';\nimport UserPage2 from './pages/UserPage2';\nimport ForgotPassword from './pages/ForgotPassword';\nimport ForgotPasswordConfirm from './pages/ForgotPasswordConfirm';\n\n\n\n\nconst App = () => {\n  return (\n    <Router>\n      <AppContent />\n    </Router>\n  );\n};\n\nconst AppContent = () => {\n  // Get the current location using useLocation hook\n  const location = useLocation();\n\n  // Determine whether to render the Navbar based on the current route\n  const shouldRenderNavbar = location.pathname !== '/' && location.pathname !== '/forgot-password' && location.pathname !== '/forgot-password-confirm';\n\n  return (\n    <div className='App'>\n      {/* Conditionally render the Navbar */}\n      {shouldRenderNavbar && <Navbar />}\n      <Routes>\n        <Route path=\"/\" element={<Login />} />\n        <Route path=\"/forgot-password\" element={<ForgotPassword />} />\n        <Route path=\"/forgot-password-confirm\" element={<ForgotPasswordConfirm />} />\n        <Route path=\"/admin\" element={<AdminPage />} />\n        <Route path=\"/user1\" element={<UserPage1 />} />\n        <Route path=\"/user2\" element={<UserPage2 />} />\n      </Routes>\n    </div>\n  );\n};\n\n\n\n/*function App() {\n\n  const location = useLocation();\n\n  // Determine whether to render the Navbar based on the current route\n  const shouldRenderNavbar = location.pathname !== '/Login' && location.pathname !== '/forgot-password';\n\n  \n  return (\n    <div className='App'>\n      <Router>\n        \n        {shouldRenderNavbar && <Navbar />}\n        <Routes>\n          \n          <Route path=\"/\" element={<Login />} />\n          <Route path=\"/forgot-password\" element={<ForgotPassword />} />\n          <Route path=\"/forgot-password-confirm\" element={<ForgotPasswordConfirm />} />\n          <Route path=\"/admin\" element={<AdminPage />} />\n          <Route path=\"/user1\" element={<UserPage1 />} />\n          <Route path=\"/user2\" element={<UserPage2 />} />\n        </Routes>\n        \n        \n      </Router>\n    </div>\n    \n  );\n};*/\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}